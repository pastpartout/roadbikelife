{"version":3,"sources":["jquery.flot.tooltip.js","curvedLines.js"],"names":["$","defaultOptions","tooltip","show","cssClass","content","xDateFormat","yDateFormat","monthNames","dayNames","shifts","x","y","defaultTheme","snap","lines","clickTips","onHover","flotItem","$tooltipEl","$compat","FlotTooltip","plot","this","tipPosition","init","tooltipOpts","prototype","that","plotPluginsLength","plugins","length","plotPlugins","p","push","name","mouseMove","e","pos","pageX","pageY","setTooltipPosition","plotclick","event","item","clickmode","getPlaceholder","bind","plothover","hideTooltip","getDomElement","is","unbind","lineDistance","p1x","p1y","p2x","p2y","Math","sqrt","closestTrace","ttPos","showTooltip","tooltipOptions","plotOptions","series","maxDistance","grid","mouseActiveRadius","distance","each","getData","i","pointNext","distToLine","closestIndex","pointOnLine","xBeforeIndex","xAfterIndex","j","data","pointPrev","x0","y0","x1","y1","o","left","tg","min","max","a","b","c","abs","l1","l2","dotLineLength","xaxis","p2c","yaxis","datapoints","pointsize","datapoint","dataIndex","seriesIndex","hooks","bindEvents","eventHolder","getOptions","wfunc","hfunc","shutdown","removeTooltip","$tip","totalTipWidth","outerWidth","totalTipHeight","outerHeight","window","scrollLeft","scrollTop","isNaN","xPrev","yPrev","target","position","targetPosition","tipText","stringFormat","html","css","top","hide","remove","addClass","appendTo","background","z-index","padding","border-radius","font-size","border","display","white-space","customText","n","seriesPattern","colorPattern","xLabelPattern","yLabelPattern","xPattern","yPattern","threshold","curvedLines","steps","points","label","originSeries","replace","percent","percents","adjustValPrecision","hasOwnProperty","color","hasAxisLabel","options","axisLabel","isTimeMode","isXDateFormat","timestampToDate","isYDateFormat","ticks","xIndex","hasRotatedXAxisTicks","tickIndex","isCategoriesMode","v","yIndex","tickFormatter","axisName","mode","tmst","dateFormat","theDate","dateGenerator","formatDate","pattern","value","precision","match","RegExp","$1","toFixed","inArray","rotatedTicks","version","jQuery","active","apply","monotonicFit","tension","nrSplinePoints","legacyOverride","undefined","processDatapoints","nrPoints","curvedLinesOptions","fit","curvePointFactor","fitPointDist","Error","hasInvalidParameters","fill","pointsTop","calculateCurvePoints","pointsBottom","k","lineWidth","yPos","ps","splines","segmentLengths","segmentSlopes","curY","dx","curX","dy","gradients","prev_length","slope","prev_slope","common","Number","coefs1","coefs2","m_k","m_k_plus","invLength","ret","x_k","coef1","coef2","coef3","coef4","diff","diffSq","spline","createHermiteSplines","result","xStart","xEnd","xStep","calculateSplineCurvePoints","fpDist","frontX","backX","num","xdata","Array","ydata","minX","factor","y2","delta","d","s","step","xnew","ynew","round","h","calculateLegacyCurvePoints","extend","processOptions","unshift"],"mappings":"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","file":"flot_addons.js","sourcesContent":["/*\r\n * jquery.flot.tooltip\r\n * \r\n * description: easy-to-use tooltips for Flot charts\r\n * version: 0.9.0\r\n * authors: Krzysztof Urbas @krzysu [myviews.pl],Evan Steinkerchner @Roundaround\r\n * website: https://github.com/krzysu/flot.tooltip\r\n * \r\n * build on 2016-07-26\r\n * released under MIT License, 2012\r\n*/ \r\n(function ($) {\r\n    // plugin options, default values\r\n    var defaultOptions = {\r\n        tooltip: {\r\n            show: false,\r\n            cssClass: \"flotTip\",\r\n            content: \"%s | X: %x | Y: %y\",\r\n            // allowed templates are:\r\n            // %s -> series label,\r\n            // %c -> series color,\r\n            // %lx -> x axis label (requires flot-axislabels plugin https://github.com/markrcote/flot-axislabels),\r\n            // %ly -> y axis label (requires flot-axislabels plugin https://github.com/markrcote/flot-axislabels),\r\n            // %x -> X value,\r\n            // %y -> Y value,\r\n            // %x.2 -> precision of X value,\r\n            // %p -> percent\r\n            // %n -> value (not percent) of pie chart\r\n            xDateFormat: null,\r\n            yDateFormat: null,\r\n            monthNames: null,\r\n            dayNames: null,\r\n            shifts: {\r\n                x: 10,\r\n                y: 20\r\n            },\r\n            defaultTheme: true,\r\n            snap: true,\r\n            lines: false,\r\n            clickTips: false,\r\n\r\n            // callbacks\r\n            onHover: function (flotItem, $tooltipEl) {},\r\n\r\n            $compat: false\r\n        }\r\n    };\r\n\r\n    // dummy default options object for legacy code (<0.8.5) - is deleted later\r\n    defaultOptions.tooltipOpts = defaultOptions.tooltip;\r\n\r\n    // object\r\n    var FlotTooltip = function (plot) {\r\n        // variables\r\n        this.tipPosition = {x: 0, y: 0};\r\n\r\n        this.init(plot);\r\n    };\r\n\r\n    // main plugin function\r\n    FlotTooltip.prototype.init = function (plot) {\r\n        var that = this;\r\n\r\n        // detect other flot plugins\r\n        var plotPluginsLength = $.plot.plugins.length;\r\n        this.plotPlugins = [];\r\n\r\n        if (plotPluginsLength) {\r\n            for (var p = 0; p < plotPluginsLength; p++) {\r\n                this.plotPlugins.push($.plot.plugins[p].name);\r\n            }\r\n        }\r\n\r\n        plot.hooks.bindEvents.push(function (plot, eventHolder) {\r\n\r\n            // get plot options\r\n            that.plotOptions = plot.getOptions();\r\n\r\n            // for legacy (<0.8.5) implementations\r\n            if (typeof(that.plotOptions.tooltip) === 'boolean') {\r\n                that.plotOptions.tooltipOpts.show = that.plotOptions.tooltip;\r\n                that.plotOptions.tooltip = that.plotOptions.tooltipOpts;\r\n                delete that.plotOptions.tooltipOpts;\r\n            }\r\n\r\n            // if not enabled return\r\n            if (that.plotOptions.tooltip.show === false || typeof that.plotOptions.tooltip.show === 'undefined') return;\r\n\r\n            // shortcut to access tooltip options\r\n            that.tooltipOptions = that.plotOptions.tooltip;\r\n\r\n            if (that.tooltipOptions.$compat) {\r\n                that.wfunc = 'width';\r\n                that.hfunc = 'height';\r\n            } else {\r\n                that.wfunc = 'innerWidth';\r\n                that.hfunc = 'innerHeight';\r\n            }\r\n\r\n            // create tooltip DOM element\r\n            var $tip = that.getDomElement();\r\n\r\n            // bind event\r\n            $( plot.getPlaceholder() ).bind(\"plothover\", plothover);\r\n            if (that.tooltipOptions.clickTips) {\r\n                $( plot.getPlaceholder() ).bind(\"plotclick\", plotclick);\r\n            }\r\n            that.clickmode = false;\r\n\r\n            $(eventHolder).bind('mousemove', mouseMove);\r\n        });\r\n\r\n        plot.hooks.shutdown.push(function (plot, eventHolder){\r\n            $(plot.getPlaceholder()).unbind(\"plothover\", plothover);\r\n            $(plot.getPlaceholder()).unbind(\"plotclick\", plotclick);\r\n            plot.removeTooltip();\r\n            $(eventHolder).unbind(\"mousemove\", mouseMove);\r\n        });\r\n\r\n        function mouseMove(e){\r\n            var pos = {};\r\n            pos.x = e.pageX;\r\n            pos.y = e.pageY;\r\n            plot.setTooltipPosition(pos);\r\n        }\r\n\r\n        /**\r\n         *  open the tooltip (if not already open) and freeze it on the current position till the next click\r\n         */\r\n        function plotclick(event, pos, item) {\r\n            if (! that.clickmode) {\r\n                // it is the click activating the clicktip\r\n                plothover(event, pos, item);\r\n                if (that.getDomElement().is(\":visible\")) {\r\n                    $(plot.getPlaceholder()).unbind(\"plothover\", plothover);\r\n                    that.clickmode = true;\r\n                }\r\n            } else {\r\n                // it is the click deactivating the clicktip\r\n                $( plot.getPlaceholder() ).bind(\"plothover\", plothover);\r\n                plot.hideTooltip();\r\n                that.clickmode = false;\r\n            }\r\n        }\r\n\r\n        function plothover(event, pos, item) {\r\n            // Simple distance formula.\r\n            var lineDistance = function (p1x, p1y, p2x, p2y) {\r\n                return Math.sqrt((p2x - p1x) * (p2x - p1x) + (p2y - p1y) * (p2y - p1y));\r\n            };\r\n\r\n            // Here is some voodoo magic for determining the distance to a line form a given point {x, y}.\r\n            var dotLineLength = function (x, y, x0, y0, x1, y1, o) {\r\n                if (o && !(o =\r\n                    function (x, y, x0, y0, x1, y1) {\r\n                        if (typeof x0 !== 'undefined') return { x: x0, y: y };\r\n                        else if (typeof y0 !== 'undefined') return { x: x, y: y0 };\r\n\r\n                        var left,\r\n                            tg = -1 / ((y1 - y0) / (x1 - x0));\r\n\r\n                        return {\r\n                            x: left = (x1 * (x * tg - y + y0) + x0 * (x * -tg + y - y1)) / (tg * (x1 - x0) + y0 - y1),\r\n                            y: tg * left - tg * x + y\r\n                        };\r\n                    } (x, y, x0, y0, x1, y1),\r\n                    o.x >= Math.min(x0, x1) && o.x <= Math.max(x0, x1) && o.y >= Math.min(y0, y1) && o.y <= Math.max(y0, y1))\r\n                ) {\r\n                    var l1 = lineDistance(x, y, x0, y0), l2 = lineDistance(x, y, x1, y1);\r\n                    return l1 > l2 ? l2 : l1;\r\n                } else {\r\n                    var a = y0 - y1, b = x1 - x0, c = x0 * y1 - y0 * x1;\r\n                    return Math.abs(a * x + b * y + c) / Math.sqrt(a * a + b * b);\r\n                }\r\n            };\r\n\r\n            if (item) {\r\n                plot.showTooltip(item, that.tooltipOptions.snap ? item : pos);\r\n            } else if (that.plotOptions.series.lines.show && that.tooltipOptions.lines === true) {\r\n                var maxDistance = that.plotOptions.grid.mouseActiveRadius;\r\n\r\n                var closestTrace = {\r\n                    distance: maxDistance + 1\r\n                };\r\n\r\n                var ttPos = pos;\r\n\r\n                $.each(plot.getData(), function (i, series) {\r\n                    var xBeforeIndex = 0,\r\n                        xAfterIndex = -1;\r\n\r\n                    // Our search here assumes our data is sorted via the x-axis.\r\n                    // TODO: Improve efficiency somehow - search smaller sets of data.\r\n                    for (var j = 1; j < series.data.length; j++) {\r\n                        if (series.data[j - 1][0] <= pos.x && series.data[j][0] >= pos.x) {\r\n                            xBeforeIndex = j - 1;\r\n                            xAfterIndex = j;\r\n                        }\r\n                    }\r\n\r\n                    if (xAfterIndex === -1) {\r\n                        plot.hideTooltip();\r\n                        return;\r\n                    }\r\n\r\n                    var pointPrev = { x: series.data[xBeforeIndex][0], y: series.data[xBeforeIndex][1] },\r\n                        pointNext = { x: series.data[xAfterIndex][0], y: series.data[xAfterIndex][1] };\r\n\r\n                    var distToLine = dotLineLength(series.xaxis.p2c(pos.x), series.yaxis.p2c(pos.y), series.xaxis.p2c(pointPrev.x),\r\n                        series.yaxis.p2c(pointPrev.y), series.xaxis.p2c(pointNext.x), series.yaxis.p2c(pointNext.y), false);\r\n\r\n                    if (distToLine < closestTrace.distance) {\r\n\r\n                        var closestIndex = lineDistance(pointPrev.x, pointPrev.y, pos.x, pos.y) <\r\n                            lineDistance(pos.x, pos.y, pointNext.x, pointNext.y) ? xBeforeIndex : xAfterIndex;\r\n\r\n                        var pointSize = series.datapoints.pointsize;\r\n\r\n                        // Calculate the point on the line vertically closest to our cursor.\r\n                        var pointOnLine = [\r\n                            pos.x,\r\n                            pointPrev.y + ((pointNext.y - pointPrev.y) * ((pos.x - pointPrev.x) / (pointNext.x - pointPrev.x)))\r\n                        ];\r\n\r\n                        var item = {\r\n                            datapoint: pointOnLine,\r\n                            dataIndex: closestIndex,\r\n                            series: series,\r\n                            seriesIndex: i\r\n                        };\r\n\r\n                        closestTrace = {\r\n                            distance: distToLine,\r\n                            item: item\r\n                        };\r\n\r\n                        if (that.tooltipOptions.snap) {\r\n                            ttPos = {\r\n                                pageX: series.xaxis.p2c(pointOnLine[0]),\r\n                                pageY: series.yaxis.p2c(pointOnLine[1])\r\n                            };\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (closestTrace.distance < maxDistance + 1)\r\n                    plot.showTooltip(closestTrace.item, ttPos);\r\n                else\r\n                    plot.hideTooltip();\r\n            } else {\r\n                plot.hideTooltip();\r\n            }\r\n        }\r\n\r\n        // Quick little function for setting the tooltip position.\r\n        plot.setTooltipPosition = function (pos) {\r\n            var $tip = that.getDomElement();\r\n\r\n            var totalTipWidth = $tip.outerWidth() + that.tooltipOptions.shifts.x;\r\n            var totalTipHeight = $tip.outerHeight() + that.tooltipOptions.shifts.y;\r\n            if ((pos.x - $(window).scrollLeft()) > ($(window)[that.wfunc]() - totalTipWidth)) {\r\n                pos.x -= totalTipWidth;\r\n                pos.x = Math.max(pos.x, 0);\r\n            }\r\n            if ((pos.y - $(window).scrollTop()) > ($(window)[that.hfunc]() - totalTipHeight)) {\r\n                pos.y -= totalTipHeight;\r\n            }\r\n\r\n\t    /*\r\n\t       The section applies the new positioning ONLY if pos.x and pos.y\r\n\t       are numbers. If they are undefined or not a number, use the last\r\n\t       known numerical position. This hack fixes a bug that kept pie\r\n\t       charts from keeping their tooltip positioning.\r\n\t     */\r\n\r\n            if (isNaN(pos.x)) {\r\n\t\tthat.tipPosition.x = that.tipPosition.xPrev;\r\n\t    }\r\n\t    else {\r\n\t\tthat.tipPosition.x = pos.x;\r\n\t\tthat.tipPosition.xPrev = pos.x;\r\n\t    }\r\n\t    if (isNaN(pos.y)) {\r\n\t\tthat.tipPosition.y = that.tipPosition.yPrev;\r\n\t    }\r\n\t    else {\r\n\t\tthat.tipPosition.y = pos.y;\r\n\t\tthat.tipPosition.yPrev = pos.y;\r\n\t    }\r\n\r\n        };\r\n\r\n        // Quick little function for showing the tooltip.\r\n        plot.showTooltip = function (target, position, targetPosition) {\r\n            var $tip = that.getDomElement();\r\n\r\n            // convert tooltip content template to real tipText\r\n            var tipText = that.stringFormat(that.tooltipOptions.content, target);\r\n            if (tipText === '')\r\n                return;\r\n\r\n            $tip.html(tipText);\r\n            plot.setTooltipPosition({ x: that.tipPosition.x, y: that.tipPosition.y });\r\n            $tip.css({\r\n                left: that.tipPosition.x + that.tooltipOptions.shifts.x,\r\n                top: that.tipPosition.y + that.tooltipOptions.shifts.y\r\n            }).show();\r\n\r\n            // run callback\r\n            if (typeof that.tooltipOptions.onHover === 'function') {\r\n                that.tooltipOptions.onHover(target, $tip);\r\n            }\r\n        };\r\n\r\n        // Quick little function for hiding the tooltip.\r\n        plot.hideTooltip = function () {\r\n            that.getDomElement().hide().html('');\r\n        };\r\n\r\n        plot.removeTooltip = function() {\r\n            that.getDomElement().remove();\r\n        };\r\n    };\r\n\r\n    /**\r\n     * get or create tooltip DOM element\r\n     * @return jQuery object\r\n     */\r\n    FlotTooltip.prototype.getDomElement = function () {\r\n        var $tip = $('<div>');\r\n        if (this.tooltipOptions && this.tooltipOptions.cssClass) {\r\n            $tip = $('.' + this.tooltipOptions.cssClass);\r\n\r\n            if( $tip.length === 0 ){\r\n                $tip = $('<div />').addClass(this.tooltipOptions.cssClass);\r\n                $tip.appendTo('body').hide().css({position: 'absolute'});\r\n\r\n                if(this.tooltipOptions.defaultTheme) {\r\n                    $tip.css({\r\n                        'background': '#fff',\r\n                        'z-index': '1040',\r\n                        'padding': '0.4em 0.6em',\r\n                        'border-radius': '0.5em',\r\n                        'font-size': '0.8em',\r\n                        'border': '1px solid #111',\r\n                        'display': 'none',\r\n                        'white-space': 'nowrap'\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return $tip;\r\n    };\r\n\r\n    /**\r\n     * core function, create tooltip content\r\n     * @param  {string} content - template with tooltip content\r\n     * @param  {object} item - Flot item\r\n     * @return {string} real tooltip content for current item\r\n     */\r\n    FlotTooltip.prototype.stringFormat = function (content, item) {\r\n        var percentPattern = /%p\\.{0,1}(\\d{0,})/;\r\n        var seriesPattern = /%s/;\r\n        var colorPattern = /%c/;\r\n        var xLabelPattern = /%lx/; // requires flot-axislabels plugin https://github.com/markrcote/flot-axislabels, will be ignored if plugin isn't loaded\r\n        var yLabelPattern = /%ly/; // requires flot-axislabels plugin https://github.com/markrcote/flot-axislabels, will be ignored if plugin isn't loaded\r\n        var xPattern = /%x\\.{0,1}(\\d{0,})/;\r\n        var yPattern = /%y\\.{0,1}(\\d{0,})/;\r\n        var xPatternWithoutPrecision = \"%x\";\r\n        var yPatternWithoutPrecision = \"%y\";\r\n        var customTextPattern = \"%ct\";\r\n\tvar nPiePattern = \"%n\";\r\n\r\n        var x, y, customText, p, n;\r\n\r\n        // for threshold plugin we need to read data from different place\r\n        if (typeof item.series.threshold !== \"undefined\") {\r\n            x = item.datapoint[0];\r\n            y = item.datapoint[1];\r\n            customText = item.datapoint[2];\r\n\t}\r\n\r\n\t// for CurvedLines plugin we need to read data from different place\r\n\t    else if (typeof item.series.curvedLines !== \"undefined\") {\r\n\t\tx = item.datapoint[0];\r\n\t\ty = item.datapoint[1];\r\n\t    }\r\n\r\n        else if (typeof item.series.lines !== \"undefined\" && item.series.lines.steps) {\r\n            x = item.series.datapoints.points[item.dataIndex * 2];\r\n            y = item.series.datapoints.points[item.dataIndex * 2 + 1];\r\n            // TODO: where to find custom text in this variant?\r\n            customText = \"\";\r\n        } else {\r\n            x = item.series.data[item.dataIndex][0];\r\n            y = item.series.data[item.dataIndex][1];\r\n            customText = item.series.data[item.dataIndex][2];\r\n        }\r\n\r\n        // I think this is only in case of threshold plugin\r\n        if (item.series.label === null && item.series.originSeries) {\r\n            item.series.label = item.series.originSeries.label;\r\n        }\r\n\r\n        // if it is a function callback get the content string\r\n        if (typeof(content) === 'function') {\r\n            content = content(item.series.label, x, y, item);\r\n        }\r\n\r\n        // the case where the passed content is equal to false\r\n        if (typeof(content) === 'boolean' && !content) {\r\n            return '';\r\n        }\r\n\r\n        /* replacement of %ct and other multi-character templates must\r\n           precede the replacement of single-character templates\r\n           to avoid conflict between '%c' and '%ct'  and similar substrings\r\n        */\r\n        if (customText) {\r\n            content = content.replace(customTextPattern, customText);\r\n        }\r\n\r\n        // percent match for pie charts and stacked percent\r\n        if (typeof (item.series.percent) !== 'undefined') {\r\n            p = item.series.percent;\r\n        } else if (typeof (item.series.percents) !== 'undefined') {\r\n            p = item.series.percents[item.dataIndex];\r\n        }\r\n        if (typeof p === 'number') {\r\n            content = this.adjustValPrecision(percentPattern, content, p);\r\n        }\r\n\r\n        // replace %n with number of items represented by slice in pie charts\r\n        if (item.series.hasOwnProperty('pie')) {\r\n            if (typeof item.series.data[0][1] !== 'undefined') {\r\n                n = item.series.data[0][1];\r\n            }\r\n        }\r\n        if (typeof n === 'number') {\r\n            content = content.replace(nPiePattern, n);\r\n        }\r\n\r\n        // series match\r\n        if (typeof(item.series.label) !== 'undefined') {\r\n            content = content.replace(seriesPattern, item.series.label);\r\n        } else {\r\n            //remove %s if label is undefined\r\n            content = content.replace(seriesPattern, \"\");\r\n        }\r\n\r\n        // color match\r\n        if (typeof(item.series.color) !== 'undefined') {\r\n            content = content.replace(colorPattern, item.series.color);\r\n        } else {\r\n            //remove %s if color is undefined\r\n            content = content.replace(colorPattern, \"\");\r\n        }\r\n\r\n        // x axis label match\r\n        if (this.hasAxisLabel('xaxis', item)) {\r\n            content = content.replace(xLabelPattern, item.series.xaxis.options.axisLabel);\r\n        } else {\r\n            //remove %lx if axis label is undefined or axislabels plugin not present\r\n            content = content.replace(xLabelPattern, \"\");\r\n        }\r\n\r\n        // y axis label match\r\n        if (this.hasAxisLabel('yaxis', item)) {\r\n            content = content.replace(yLabelPattern, item.series.yaxis.options.axisLabel);\r\n        } else {\r\n            //remove %ly if axis label is undefined or axislabels plugin not present\r\n            content = content.replace(yLabelPattern, \"\");\r\n        }\r\n\r\n        // time mode axes with custom dateFormat\r\n        if (this.isTimeMode('xaxis', item) && this.isXDateFormat(item)) {\r\n            content = content.replace(xPattern, this.timestampToDate(x, this.tooltipOptions.xDateFormat, item.series.xaxis.options));\r\n        }\r\n        if (this.isTimeMode('yaxis', item) && this.isYDateFormat(item)) {\r\n            content = content.replace(yPattern, this.timestampToDate(y, this.tooltipOptions.yDateFormat, item.series.yaxis.options));\r\n        }\r\n\r\n        // set precision if defined\r\n        if (typeof x === 'number') {\r\n            content = this.adjustValPrecision(xPattern, content, x);\r\n        }\r\n        if (typeof y === 'number') {\r\n            content = this.adjustValPrecision(yPattern, content, y);\r\n        }\r\n\r\n        // change x from number to given label, if given\r\n        if (typeof item.series.xaxis.ticks !== 'undefined') {\r\n\r\n            var ticks;\r\n            if (this.hasRotatedXAxisTicks(item)) {\r\n                // xaxis.ticks will be an empty array if tickRotor is being used, but the values are available in rotatedTicks\r\n                ticks = 'rotatedTicks';\r\n            } else {\r\n                ticks = 'ticks';\r\n            }\r\n\r\n            // see https://github.com/krzysu/flot.tooltip/issues/65\r\n            var tickIndex = item.dataIndex + item.seriesIndex;\r\n\r\n            for (var xIndex in item.series.xaxis[ticks]) {\r\n                if (item.series.xaxis[ticks].hasOwnProperty(tickIndex) && !this.isTimeMode('xaxis', item)) {\r\n                    var valueX = (this.isCategoriesMode('xaxis', item)) ? item.series.xaxis[ticks][tickIndex].label : item.series.xaxis[ticks][tickIndex].v;\r\n                    if (valueX === x) {\r\n                        content = content.replace(xPattern, item.series.xaxis[ticks][tickIndex].label.replace(/\\$/g, '$$$$'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // change y from number to given label, if given\r\n        if (typeof item.series.yaxis.ticks !== 'undefined') {\r\n            for (var yIndex in item.series.yaxis.ticks) {\r\n                if (item.series.yaxis.ticks.hasOwnProperty(yIndex)) {\r\n                    var valueY = (this.isCategoriesMode('yaxis', item)) ? item.series.yaxis.ticks[yIndex].label : item.series.yaxis.ticks[yIndex].v;\r\n                    if (valueY === y) {\r\n                        content = content.replace(yPattern, item.series.yaxis.ticks[yIndex].label.replace(/\\$/g, '$$$$'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // if no value customization, use tickFormatter by default\r\n        if (typeof item.series.xaxis.tickFormatter !== 'undefined') {\r\n            //escape dollar\r\n            content = content.replace(xPatternWithoutPrecision, item.series.xaxis.tickFormatter(x, item.series.xaxis).replace(/\\$/g, '$$'));\r\n        }\r\n        if (typeof item.series.yaxis.tickFormatter !== 'undefined') {\r\n            //escape dollar\r\n            content = content.replace(yPatternWithoutPrecision, item.series.yaxis.tickFormatter(y, item.series.yaxis).replace(/\\$/g, '$$'));\r\n        }\r\n\r\n        return content;\r\n    };\r\n\r\n    // helpers just for readability\r\n    FlotTooltip.prototype.isTimeMode = function (axisName, item) {\r\n        return (typeof item.series[axisName].options.mode !== 'undefined' && item.series[axisName].options.mode === 'time');\r\n    };\r\n\r\n    FlotTooltip.prototype.isXDateFormat = function (item) {\r\n        return (typeof this.tooltipOptions.xDateFormat !== 'undefined' && this.tooltipOptions.xDateFormat !== null);\r\n    };\r\n\r\n    FlotTooltip.prototype.isYDateFormat = function (item) {\r\n        return (typeof this.tooltipOptions.yDateFormat !== 'undefined' && this.tooltipOptions.yDateFormat !== null);\r\n    };\r\n\r\n    FlotTooltip.prototype.isCategoriesMode = function (axisName, item) {\r\n        return (typeof item.series[axisName].options.mode !== 'undefined' && item.series[axisName].options.mode === 'categories');\r\n    };\r\n\r\n    //\r\n    FlotTooltip.prototype.timestampToDate = function (tmst, dateFormat, options) {\r\n        var theDate = $.plot.dateGenerator(tmst, options);\r\n        return $.plot.formatDate(theDate, dateFormat, this.tooltipOptions.monthNames, this.tooltipOptions.dayNames);\r\n    };\r\n\r\n    //\r\n    FlotTooltip.prototype.adjustValPrecision = function (pattern, content, value) {\r\n\r\n        var precision;\r\n        var matchResult = content.match(pattern);\r\n        if( matchResult !== null ) {\r\n            if(RegExp.$1 !== '') {\r\n                precision = RegExp.$1;\r\n                value = value.toFixed(precision);\r\n\r\n                // only replace content if precision exists, in other case use thickformater\r\n                content = content.replace(pattern, value);\r\n            }\r\n        }\r\n        return content;\r\n    };\r\n\r\n    // other plugins detection below\r\n\r\n    // check if flot-axislabels plugin (https://github.com/markrcote/flot-axislabels) is used and that an axis label is given\r\n    FlotTooltip.prototype.hasAxisLabel = function (axisName, item) {\r\n        return ($.inArray('axisLabels', this.plotPlugins) !== -1 && typeof item.series[axisName].options.axisLabel !== 'undefined' && item.series[axisName].options.axisLabel.length > 0);\r\n    };\r\n\r\n    // check whether flot-tickRotor, a plugin which allows rotation of X-axis ticks, is being used\r\n    FlotTooltip.prototype.hasRotatedXAxisTicks = function (item) {\r\n        return ($.inArray('tickRotor',this.plotPlugins) !== -1 && typeof item.series.xaxis.rotatedTicks !== 'undefined');\r\n    };\r\n\r\n    //\r\n    var init = function (plot) {\r\n      new FlotTooltip(plot);\r\n    };\r\n\r\n    // define Flot plugin\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: defaultOptions,\r\n        name: 'tooltip',\r\n        version: '0.8.5'\r\n    });\r\n\r\n})(jQuery);\r\n","/* The MIT License\r\n\r\n Copyright (c) 2011 by Michael Zinsmaier and nergal.dev\r\n Copyright (c) 2012 by Thomas Ritou\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/*\r\n____________________________________________________\r\n\r\n what it is:\r\n ____________________________________________________\r\n\r\n curvedLines is a plugin for flot, that tries to display lines in a smoother way.\r\n This is achieved through adding of more data points. The plugin is a data processor and can thus be used\r\n in combination with standard line / point rendering options.\r\n\r\n => 1) with large data sets you may get trouble\r\n => 2) if you want to display the points too, you have to plot them as 2nd data series over the lines\r\n => 3) consecutive x data points are not allowed to have the same value\r\n\r\n Feel free to further improve the code\r\n\r\n ____________________________________________________\r\n\r\n how to use it:\r\n ____________________________________________________\r\n\r\n var d1 = [[5,5],[7,3],[9,12]];\r\n\r\n var options = { series: { curvedLines: {  active: true }}};\r\n\r\n $.plot($(\"#placeholder\"), [{data: d1, lines: { show: true}, curvedLines: {apply: true}}], options);\r\n\r\n _____________________________________________________\r\n\r\n options:\r\n _____________________________________________________\r\n\r\n active:           bool true => plugin can be used\r\n apply:            bool true => series will be drawn as curved line\r\n monotonicFit:\t   bool true => uses monotone cubic interpolation (preserve monotonicity)\r\n tension:          int          defines the tension parameter of the hermite spline interpolation (no effect if monotonicFit is set)\r\n nrSplinePoints:   int \t\t\tdefines the number of sample points (of the spline) in between two consecutive points\r\n\r\n deprecated options from flot prior to 1.0.0:\r\n ------------------------------------------------\r\n legacyOverride\t   bool true => use old default\r\n    OR\r\n legacyOverride    optionArray\r\n {\r\n \tfit: \t             bool true => forces the max,mins of the curve to be on the datapoints\r\n \tcurvePointFactor\t int  \t\t  defines how many \"virtual\" points are used per \"real\" data point to\r\n \t\t\t\t\t\t\t\t\t  emulate the curvedLines (points total = real points * curvePointFactor)\r\n \tfitPointDist: \t     int  \t\t  defines the x axis distance of the additional two points that are used\r\n }\t\t\t\t\t\t   \t\t   \t  to enforce the min max condition.\r\n */\r\n\r\n/*\r\n *  v0.1   initial commit\r\n *  v0.15  negative values should work now (outcommented a negative -> 0 hook hope it does no harm)\r\n *  v0.2   added fill option (thanks to monemihir) and multi axis support (thanks to soewono effendi)\r\n *  v0.3   improved saddle handling and added basic handling of Dates\r\n *  v0.4   rewritten fill option (thomas ritou) mostly from original flot code (now fill between points rather than to graph bottom), corrected fill Opacity bug\r\n *  v0.5   rewritten instead of implementing a own draw function CurvedLines is now based on the processDatapoints flot hook (credits go to thomas ritou).\r\n * \t\t   This change breakes existing code however CurvedLines are now just many tiny straight lines to flot and therefore all flot lines options (like gradient fill,\r\n * \t       shadow) are now supported out of the box\r\n *  v0.6   flot 0.8 compatibility and some bug fixes\r\n *  v0.6.x changed versioning schema\r\n *\r\n *  v1.0.0 API Break marked existing implementation/options as deprecated\r\n *  v1.1.0 added the new curved line calculations based on hermite splines\r\n *  v1.1.1 added a rough parameter check to make sure the new options are used\r\n */\r\n\r\n(function($) {\r\n\r\n\tvar options = {\r\n\t\tseries : {\r\n\t\t\tcurvedLines : {\r\n\t\t\t\tactive : false,\r\n\t\t\t\tapply : false,\r\n\t\t\t\tmonotonicFit : false,\r\n\t\t\t\ttension : 0.5,\r\n\t\t\t\tnrSplinePoints : 20,\r\n\t\t\t\tlegacyOverride : undefined\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tfunction init(plot) {\r\n\r\n\t\tplot.hooks.processOptions.push(processOptions);\r\n\r\n\t\t//if the plugin is active register processDatapoints method\r\n\t\tfunction processOptions(plot, options) {\r\n\t\t\tif (options.series.curvedLines.active) {\r\n\t\t\t\tplot.hooks.processDatapoints.unshift(processDatapoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//only if the plugin is active\r\n\t\tfunction processDatapoints(plot, series, datapoints) {\r\n\t\t\tvar nrPoints = datapoints.points.length / datapoints.pointsize;\r\n\t\t\tvar EPSILON = 0.005;\r\n\r\n\t\t\t//detects missplaced legacy parameters (prior v1.x.x) in the options object\r\n\t\t\t//this can happen if somebody upgrades to v1.x.x without adjusting the parameters or uses old examples\r\n            var invalidLegacyOptions = hasInvalidParameters(series.curvedLines);\r\n\r\n\t\t\tif (!invalidLegacyOptions && series.curvedLines.apply == true && series.originSeries === undefined && nrPoints > (1 + EPSILON)) {\r\n\t\t\t\tif (series.lines.fill) {\r\n\r\n\t\t\t\t\tvar pointsTop = calculateCurvePoints(datapoints, series.curvedLines, 1);\r\n\t\t\t\t\tvar pointsBottom = calculateCurvePoints(datapoints, series.curvedLines, 2);\r\n\t\t\t\t\t//flot makes sure for us that we've got a second y point if fill is true !\r\n\r\n\t\t\t\t\t//Merge top and bottom curve\r\n\t\t\t\t\tdatapoints.pointsize = 3;\r\n\t\t\t\t\tdatapoints.points = [];\r\n\t\t\t\t\tvar j = 0;\r\n\t\t\t\t\tvar k = 0;\r\n\t\t\t\t\tvar i = 0;\r\n\t\t\t\t\tvar ps = 2;\r\n\t\t\t\t\twhile (i < pointsTop.length || j < pointsBottom.length) {\r\n\t\t\t\t\t\tif (pointsTop[i] == pointsBottom[j]) {\r\n\t\t\t\t\t\t\tdatapoints.points[k] = pointsTop[i];\r\n\t\t\t\t\t\t\tdatapoints.points[k + 1] = pointsTop[i + 1];\r\n\t\t\t\t\t\t\tdatapoints.points[k + 2] = pointsBottom[j + 1];\r\n\t\t\t\t\t\t\tj += ps;\r\n\t\t\t\t\t\t\ti += ps;\r\n\r\n\t\t\t\t\t\t} else if (pointsTop[i] < pointsBottom[j]) {\r\n\t\t\t\t\t\t\tdatapoints.points[k] = pointsTop[i];\r\n\t\t\t\t\t\t\tdatapoints.points[k + 1] = pointsTop[i + 1];\r\n\t\t\t\t\t\t\tdatapoints.points[k + 2] = k > 0 ? datapoints.points[k - 1] : null;\r\n\t\t\t\t\t\t\ti += ps;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdatapoints.points[k] = pointsBottom[j];\r\n\t\t\t\t\t\t\tdatapoints.points[k + 1] = k > 1 ? datapoints.points[k - 2] : null;\r\n\t\t\t\t\t\t\tdatapoints.points[k + 2] = pointsBottom[j + 1];\r\n\t\t\t\t\t\t\tj += ps;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tk += 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (series.lines.lineWidth > 0) {\r\n\t\t\t\t\tdatapoints.points = calculateCurvePoints(datapoints, series.curvedLines, 1);\r\n\t\t\t\t\tdatapoints.pointsize = 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction calculateCurvePoints(datapoints, curvedLinesOptions, yPos) {\r\n\t\t\tif ( typeof curvedLinesOptions.legacyOverride != 'undefined' && curvedLinesOptions.legacyOverride != false) {\r\n\t\t\t\tvar defaultOptions = {\r\n\t\t\t\t\tfit : false,\r\n\t\t\t\t\tcurvePointFactor : 20,\r\n\t\t\t\t\tfitPointDist : undefined\r\n\t\t\t\t};\r\n\t\t\t\tvar legacyOptions = jQuery.extend(defaultOptions, curvedLinesOptions.legacyOverride);\r\n\t\t\t\treturn calculateLegacyCurvePoints(datapoints, legacyOptions, yPos);\r\n\t\t\t}\r\n\r\n\t\t\treturn calculateSplineCurvePoints(datapoints, curvedLinesOptions, yPos);\r\n\t\t}\r\n\r\n\t\tfunction calculateSplineCurvePoints(datapoints, curvedLinesOptions, yPos) {\r\n\t\t\tvar points = datapoints.points;\r\n\t\t\tvar ps = datapoints.pointsize;\r\n\r\n\t\t\t//create interpolant fuction\r\n\t\t\tvar splines = createHermiteSplines(datapoints, curvedLinesOptions, yPos);\r\n\t\t\tvar result = [];\r\n\r\n\t\t\t//sample the function\r\n\t\t\t// (the result is intependent from the input data =>\r\n\t\t\t//\tit is ok to alter the input after this method)\r\n\t\t\tvar j = 0;\r\n\t\t\tfor (var i = 0; i < points.length - ps; i += ps) {\r\n\t\t\t\tvar curX = i;\r\n\t\t\t\tvar curY = i + yPos;\r\n\r\n\t\t\t\tvar xStart = points[curX];\r\n\t\t\t\tvar xEnd = points[curX + ps];\r\n\t\t\t\tvar xStep = (xEnd - xStart) / Number(curvedLinesOptions.nrSplinePoints);\r\n\r\n\t\t\t\t//add point\r\n\t\t\t\tresult.push(points[curX]);\r\n\t\t\t\tresult.push(points[curY]);\r\n\r\n\t\t\t\t//add curve point\r\n\t\t\t\tfor (var x = (xStart += xStep); x < xEnd; x += xStep) {\r\n\t\t\t\t\tresult.push(x);\r\n\t\t\t\t\tresult.push(splines[j](x));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\r\n\t\t\t//add last point\r\n\t\t\tresult.push(points[points.length - ps]);\r\n\t\t\tresult.push(points[points.length - ps + yPos]);\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\r\n\r\n\t\t// Creates an array of splines, one for each segment of the original curve. Algorithm based on the wikipedia articles:\r\n\t\t//\r\n\t\t// http://de.wikipedia.org/w/index.php?title=Kubisch_Hermitescher_Spline&oldid=130168003 and\r\n\t\t// http://en.wikipedia.org/w/index.php?title=Monotone_cubic_interpolation&oldid=622341725 and the description of Fritsch-Carlson from\r\n\t\t// http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n\t\t// for a detailed description see https://github.com/MichaelZinsmaier/CurvedLines/docu\r\n\t\tfunction createHermiteSplines(datapoints, curvedLinesOptions, yPos) {\r\n\t\t\tvar points = datapoints.points;\r\n\t\t\tvar ps = datapoints.pointsize;\r\n\r\n\t\t\t// preparation get length (x_{k+1} - x_k) and slope s=(p_{k+1} - p_k) / (x_{k+1} - x_k) of the segments\r\n\t\t\tvar segmentLengths = [];\r\n\t\t\tvar segmentSlopes = [];\r\n\r\n\t\t\tfor (var i = 0; i < points.length - ps; i += ps) {\r\n\t\t\t\tvar curX = i;\r\n\t\t\t\tvar curY = i + yPos;\r\n\t\t\t\tvar dx = points[curX + ps] - points[curX];\r\n\t\t\t\tvar dy = points[curY + ps] - points[curY];\r\n\r\n\t\t\t\tsegmentLengths.push(dx);\r\n\t\t\t\tsegmentSlopes.push(dy / dx);\r\n\t\t\t}\r\n\r\n\t\t\t//get the values for the desired gradients  m_k for all points k\r\n\t\t\t//depending on the used method the formula is different\r\n\t\t\tvar gradients = [segmentSlopes[0]];\r\n\t\t\tif (curvedLinesOptions.monotonicFit) {\r\n\t\t\t\t// Fritsch Carlson\r\n\t\t\t\tfor (var i = 1; i < segmentLengths.length; i++) {\r\n\t\t\t\t\tvar slope = segmentSlopes[i];\r\n\t\t\t\t\tvar prev_slope = segmentSlopes[i - 1];\r\n\t\t\t\t\tif (slope * prev_slope <= 0) { // sign(prev_slope) != sign(slpe)\r\n\t\t\t\t\t\tgradients.push(0);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar length = segmentLengths[i];\r\n\t\t\t\t\t\tvar prev_length = segmentLengths[i - 1];\r\n\t\t\t\t\t\tvar common = length + prev_length;\r\n\t\t\t\t\t\t//m = 3 (prev_length + length) / ((2 length + prev_length) / prev_slope + (length + 2 prev_length) / slope)\r\n\t\t\t\t\t\tgradients.push(3 * common / ((common + length) / prev_slope + (common + prev_length) / slope));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Cardinal spline with t € [0,1]\r\n\t\t\t\t// Catmull-Rom for t = 0\r\n\t\t\t\tfor (var i = ps; i < points.length - ps; i += ps) {\r\n\t\t\t\t\tvar curX = i;\r\n\t\t\t\t\tvar curY = i + yPos;\r\n\t\t\t\t\tgradients.push(Number(curvedLinesOptions.tension) * (points[curY + ps] - points[curY - ps]) / (points[curX + ps] - points[curX - ps]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgradients.push(segmentSlopes[segmentSlopes.length - 1]);\r\n\r\n\t\t\t//get the two major coefficients (c'_{oef1} and c'_{oef2}) for each segment spline\r\n\t\t\tvar coefs1 = [];\r\n\t\t\tvar coefs2 = [];\r\n\t\t\tfor (i = 0; i < segmentLengths.length; i++) {\r\n\t\t\t\tvar m_k = gradients[i];\r\n\t\t\t\tvar m_k_plus = gradients[i + 1];\r\n\t\t\t\tvar slope = segmentSlopes[i];\r\n\t\t\t\tvar invLength = 1 / segmentLengths[i];\r\n\t\t\t\tvar common = m_k + m_k_plus - slope - slope;\r\n\r\n\t\t\t\tcoefs1.push(common * invLength * invLength);\r\n\t\t\t\tcoefs2.push((slope - common - m_k) * invLength);\r\n\t\t\t}\r\n\r\n\t\t\t//create functions with from the coefficients and capture the parameters\r\n\t\t\tvar ret = [];\r\n\t\t\tfor (var i = 0; i < segmentLengths.length; i ++) {\r\n\t\t\t\tvar spline = function (x_k, coef1, coef2, coef3, coef4) {\r\n\t\t\t\t\t// spline for a segment\r\n\t\t\t\t\treturn function (x) {\r\n\t\t\t\t\t\tvar diff = x - x_k;\r\n\t\t\t\t\t\tvar diffSq = diff * diff;\r\n\t\t\t\t\t\treturn coef1 * diff * diffSq + coef2 * diffSq + coef3 * diff + coef4;\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\tret.push(spline(points[i * ps], coefs1[i], coefs2[i], gradients[i], points[i * ps + yPos]));\r\n\t\t\t}\r\n\r\n\t\t\treturn ret;\r\n\t\t};\r\n\r\n\t\t//no real idea whats going on here code mainly from https://code.google.com/p/flot/issues/detail?id=226\r\n\t\t//if fit option is selected additional datapoints get inserted before the curve calculations in nergal.dev s code.\r\n\t\tfunction calculateLegacyCurvePoints(datapoints, curvedLinesOptions, yPos) {\r\n\r\n\t\t\tvar points = datapoints.points;\r\n\t\t\tvar ps = datapoints.pointsize;\r\n\t\t\tvar num = Number(curvedLinesOptions.curvePointFactor) * (points.length / ps);\r\n\r\n\t\t\tvar xdata = new Array;\r\n\t\t\tvar ydata = new Array;\r\n\r\n\t\t\tvar curX = -1;\r\n\t\t\tvar curY = -1;\r\n\t\t\tvar j = 0;\r\n\r\n\t\t\tif (curvedLinesOptions.fit) {\r\n\t\t\t\t//insert a point before and after the \"real\" data point to force the line\r\n\t\t\t\t//to have a max,min at the data point.\r\n\r\n\t\t\t\tvar fpDist;\r\n\t\t\t\tif ( typeof curvedLinesOptions.fitPointDist == 'undefined') {\r\n\t\t\t\t\t//estimate it\r\n\t\t\t\t\tvar minX = points[0];\r\n\t\t\t\t\tvar maxX = points[points.length - ps];\r\n\t\t\t\t\tfpDist = (maxX - minX) / (500 * 100);\r\n\t\t\t\t\t//x range / (estimated pixel length of placeholder * factor)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//use user defined value\r\n\t\t\t\t\tfpDist = Number(curvedLinesOptions.fitPointDist);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0; i < points.length; i += ps) {\r\n\r\n\t\t\t\t\tvar frontX;\r\n\t\t\t\t\tvar backX;\r\n\t\t\t\t\tcurX = i;\r\n\t\t\t\t\tcurY = i + yPos;\r\n\r\n\t\t\t\t\t//add point X s\r\n\t\t\t\t\tfrontX = points[curX] - fpDist;\r\n\t\t\t\t\tbackX = points[curX] + fpDist;\r\n\r\n\t\t\t\t\tvar factor = 2;\r\n\t\t\t\t\twhile (frontX == points[curX] || backX == points[curX]) {\r\n\t\t\t\t\t\t//inside the ulp\r\n\t\t\t\t\t\tfrontX = points[curX] - (fpDist * factor);\r\n\t\t\t\t\t\tbackX = points[curX] + (fpDist * factor);\r\n\t\t\t\t\t\tfactor++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//add curve points\r\n\t\t\t\t\txdata[j] = frontX;\r\n\t\t\t\t\tydata[j] = points[curY];\r\n\t\t\t\t\tj++;\r\n\r\n\t\t\t\t\txdata[j] = points[curX];\r\n\t\t\t\t\tydata[j] = points[curY];\r\n\t\t\t\t\tj++;\r\n\r\n\t\t\t\t\txdata[j] = backX;\r\n\t\t\t\t\tydata[j] = points[curY];\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//just use the datapoints\r\n\t\t\t\tfor (var i = 0; i < points.length; i += ps) {\r\n\t\t\t\t\tcurX = i;\r\n\t\t\t\t\tcurY = i + yPos;\r\n\r\n\t\t\t\t\txdata[j] = points[curX];\r\n\t\t\t\t\tydata[j] = points[curY];\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar n = xdata.length;\r\n\r\n\t\t\tvar y2 = new Array();\r\n\t\t\tvar delta = new Array();\r\n\t\t\ty2[0] = 0;\r\n\t\t\ty2[n - 1] = 0;\r\n\t\t\tdelta[0] = 0;\r\n\r\n\t\t\tfor (var i = 1; i < n - 1; ++i) {\r\n\t\t\t\tvar d = (xdata[i + 1] - xdata[i - 1]);\r\n\t\t\t\tif (d == 0) {\r\n\t\t\t\t\t//point before current point and after current point need some space in between\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar s = (xdata[i] - xdata[i - 1]) / d;\r\n\t\t\t\tvar p = s * y2[i - 1] + 2;\r\n\t\t\t\ty2[i] = (s - 1) / p;\r\n\t\t\t\tdelta[i] = (ydata[i + 1] - ydata[i]) / (xdata[i + 1] - xdata[i]) - (ydata[i] - ydata[i - 1]) / (xdata[i] - xdata[i - 1]);\r\n\t\t\t\tdelta[i] = (6 * delta[i] / (xdata[i + 1] - xdata[i - 1]) - s * delta[i - 1]) / p;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var j = n - 2; j >= 0; --j) {\r\n\t\t\t\ty2[j] = y2[j] * y2[j + 1] + delta[j];\r\n\t\t\t}\r\n\r\n\t\t\t//   xmax  - xmin  / #points\r\n\t\t\tvar step = (xdata[n - 1] - xdata[0]) / (num - 1);\r\n\r\n\t\t\tvar xnew = new Array;\r\n\t\t\tvar ynew = new Array;\r\n\t\t\tvar result = new Array;\r\n\r\n\t\t\txnew[0] = xdata[0];\r\n\t\t\tynew[0] = ydata[0];\r\n\r\n\t\t\tresult.push(xnew[0]);\r\n\t\t\tresult.push(ynew[0]);\r\n\r\n\t\t\tfor ( j = 1; j < num; ++j) {\r\n\t\t\t\t//new x point (sampling point for the created curve)\r\n\t\t\t\txnew[j] = xnew[0] + j * step;\r\n\r\n\t\t\t\tvar max = n - 1;\r\n\t\t\t\tvar min = 0;\r\n\r\n\t\t\t\twhile (max - min > 1) {\r\n\t\t\t\t\tvar k = Math.round((max + min) / 2);\r\n\t\t\t\t\tif (xdata[k] > xnew[j]) {\r\n\t\t\t\t\t\tmax = k;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmin = k;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//found point one to the left and one to the right of generated new point\r\n\t\t\t\tvar h = (xdata[max] - xdata[min]);\r\n\r\n\t\t\t\tif (h == 0) {\r\n\t\t\t\t\t//similar to above two points from original x data need some space between them\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar a = (xdata[max] - xnew[j]) / h;\r\n\t\t\t\tvar b = (xnew[j] - xdata[min]) / h;\r\n\r\n\t\t\t\tynew[j] = a * ydata[min] + b * ydata[max] + ((a * a * a - a) * y2[min] + (b * b * b - b) * y2[max]) * (h * h) / 6;\r\n\r\n\t\t\t\tresult.push(xnew[j]);\r\n\t\t\t\tresult.push(ynew[j]);\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tfunction hasInvalidParameters(curvedLinesOptions) {\r\n\t\t\tif (typeof curvedLinesOptions.fit != 'undefined' ||\r\n\t\t\t    typeof curvedLinesOptions.curvePointFactor != 'undefined' ||\r\n\t\t\t    typeof curvedLinesOptions.fitPointDist != 'undefined') {\r\n\t\t\t    \tthrow new Error(\"CurvedLines detected illegal parameters. The CurvedLines API changed with version 1.0.0 please check the options object.\");\r\n\t\t\t    \treturn true;\r\n\t\t\t    }\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\t}//end init\r\n\r\n\r\n\t$.plot.plugins.push({\r\n\t\tinit : init,\r\n\t\toptions : options,\r\n\t\tname : 'curvedLines',\r\n\t\tversion : '1.1.1'\r\n\t});\r\n\r\n})(jQuery);\r\n"]}